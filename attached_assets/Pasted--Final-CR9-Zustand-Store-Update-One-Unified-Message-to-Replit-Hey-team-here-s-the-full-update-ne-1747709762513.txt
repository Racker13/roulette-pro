✅ Final CR9 Zustand Store Update — One Unified Message to Replit
Hey team, here's the full update needed to finalize our Zustand store for CR9: Session + Spin Logic Finalization in the Roulette Pro V2 app.

Please apply all of the following in one commit:

🧠 Zustand Store Goals
We want to:

Track per-spin profit/loss

Maintain a running session total

Auto-clear active bets after each spin

Prep the store for use with LastResultsCard and SessionHistoryCard

📁 File to Modify: useRouletteStore.ts
Replace the current Zustand store with the following, updated version. It includes:

✅ Red/Black win/loss payout logic (1:1)

✅ sessionProfit field and updates

✅ addSpinResult() that calculates and logs:

spin result number & color

profit/loss for that spin

running session total

which bets were active during that spin

✅ Clears active bets after each spin

✅ Resets sessionProfit on startSession() and reset()

✅ Exposes setSessionProfit so components can update manually if needed

✅ Full Zustand Store (Paste this)
ts
Copy
Edit
import { create } from 'zustand';
import type { ChipValue, Bet, SpinResult } from '@/lib/types';

function getColorFromNumber(num: number | '00'): 'red' | 'black' | 'green' {
  const redNumbers = [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36];
  const blackNumbers = [2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35];
  if (num === 0 || num === '00') return 'green';
  if (redNumbers.includes(Number(num))) return 'red';
  return 'black';
}

interface RouletteState {
  selectedChipValue: ChipValue;
  placedBets: Bet[];
  spinResults: SpinResult[];
  sessionProfit: number;
  autoSpinCount: number;
  autoSpinMinutes: number;
  sessionId: string | null;
  setSelectedChipValue: (value: ChipValue) => void;
  setAutoSpinCount: (count: number) => void;
  setAutoSpinMinutes: (minutes: number) => void;
  addBet: (bet: Omit<Bet, 'id'>) => void;
  clearBets: () => void;
  addSpinResult: (number: number | '00') => void;
  clearSpinResults: () => void;
  exportSession: () => string;
  startSession: () => void;
  reset: () => void;
  setSessionProfit: (profit: number) => void;
}

export const useRouletteStore = create<RouletteState>((set, get) => ({
  sessionId: null,
  selectedChipValue: 1,
  placedBets: [],
  spinResults: [],
  sessionProfit: 0,
  autoSpinCount: 0,
  autoSpinMinutes: 0,

  setSelectedChipValue: (value) => set({ selectedChipValue: value }),
  setAutoSpinCount: (count) => set({ autoSpinCount: count }),
  setAutoSpinMinutes: (minutes) => set({ autoSpinMinutes: minutes }),
  setSessionProfit: (profit) => set({ sessionProfit: profit }),

  addBet: (bet) =>
    set((state) => ({
      placedBets: [...state.placedBets, { ...bet, id: crypto.randomUUID() }],
    })),

  clearBets: () => set({ placedBets: [] }),

  addSpinResult: (number) => set((state) => {
    const color = getColorFromNumber(number);
    const numValue = typeof number === 'number' ? number : 0;

    const currentBets = [...state.placedBets];
    let spinProfit = 0;

    currentBets.forEach((bet) => {
      if (
        (bet.type === 'red' && color === 'red') ||
        (bet.type === 'black' && color === 'black')
      ) {
        spinProfit += bet.amount; // 1:1 payout
      } else {
        spinProfit -= bet.amount;
      }
    });

    const newSessionProfit = state.sessionProfit + spinProfit;

    const result: SpinResult = {
      number,
      color,
      isEven: numValue > 0 && numValue % 2 === 0,
      isLow: numValue >= 1 && numValue <= 18,
      profitLoss: spinProfit,
      runningTotal: newSessionProfit,
      bets: currentBets,
    };

    return {
      spinResults: [result, ...state.spinResults].slice(0, 20),
      sessionProfit: newSessionProfit,
      placedBets: [], // auto-clear after spin
    };
  }),

  clearSpinResults: () => set({ spinResults: [] }),

  exportSession: () =>
    JSON.stringify(
      {
        placedBets: get().placedBets,
        spinResults: get().spinResults,
        timestamp: new Date().toISOString(),
      },
      null,
      2
    ),

  startSession: () =>
    set(() => ({
      sessionId: `session-${Date.now()}`,
      spinResults: [],
      placedBets: [],
      sessionProfit: 0,
    })),

  reset: () =>
    set(() => ({
      placedBets: [],
      spinResults: [],
      sessionId: null,
      sessionProfit: 0,
    })),
}));
Thanks! Once this is applied, we’ll wire up the new profitLoss and runningTotal fields into the UI cards next.